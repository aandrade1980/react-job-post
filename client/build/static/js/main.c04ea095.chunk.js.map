{"version":3,"sources":["components/Header.js","components/NewJobPost.js","components/JobPostList.js","App.js","serviceWorker.js","index.js"],"names":["memo","_ref","title","react_default","a","createElement","className","NewJobPost","state","description","submitJobPost","event","preventDefault","data","FormData","append","_this","uploadInput","files","fetch","method","body","then","res","json","success","props","history","push","console","log","error","changeHandler","_event$target","target","name","value","setState","Object","defineProperty","_this2","this","onSubmit","htmlFor","type","onChange","rows","cols","ref","Component","withRouter","JobItem","lazy","__webpack_require__","e","bind","JobPostList","_useState","useState","_useState2","slicedToArray","jobs","setJobs","useEffect","response","jsonResponse","deleteJob","id","concat","removeJobById","jobId","filter","job","_id","react","fallback","length","map","key","imgUrl","createdAt","App","Fragment","src_components_Header","BrowserRouter","Link","to","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c04ea095.chunk.js","sourcesContent":["import React, { memo } from 'react';\n\nimport './Header.scss';\n\nexport default memo(function Header({ title }) {\n  return (\n    <header className=\"header\">\n      <h1>\n        { title }\n      </h1>\n    </header>\n  )\n});\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport './NewJobPost.scss';\n\nclass NewJobPost extends Component {\n  state = {\n    title: '',\n    description: '',\n  }\n\n  submitJobPost = event => {\n    event.preventDefault();\n    const data = new FormData();\n    data.append('title', this.state.title);\n    data.append('description', this.state.description);\n    data.append('file', this.uploadInput.files[0]);\n      \n    fetch('/api/putJob', {\n      method: 'POST',\n      body: data\n    }).then(res => res.json())\n      .then(res => {\n        if (res.success) {\n          this.props.history.push('/')\n        } else {\n          console.log('Error: ', res.error);\n          \n        }\n      });\n  }\n\n  changeHandler = event => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    return (\n      <form onSubmit={ this.submitJobPost }>\n        <fieldset>\n          <legend>Job Info</legend>\n          <div>\n            <label htmlFor=\"title\">Title:</label>\n            <input \n              type=\"text\" \n              name=\"title\" \n              value={ this.state.title } \n              onChange={ this.changeHandler }\n            />\n          </div>\n          <div>\n            <label htmlFor=\"description\">Description:</label>\n            <textarea \n              name=\"description\" \n              rows=\"4\" \n              cols=\"50\"\n              value={ this.state.description } \n              onChange={ this.changeHandler }\n            />\n          </div>\n          <div>\n            <label>PrintScreen: </label>\n            <input \n              ref={ (ref) => { this.uploadInput = ref }} \n              type=\"file\" \n            />\n          </div>\n          <div className=\"button\">\n            <button type=\"submit\">Send this!</button>\n          </div>\n        </fieldset>\n      </form>\n    )\n  }\n}\n\nexport default withRouter(NewJobPost);\n","import React, { useState, useEffect, lazy, Suspense } from 'react'\n\n// import JobItem from './JobItem';\n\nconst JobItem = lazy(() => import('./JobItem'));\n\nconst JobPostList = () => {\n  const [jobs, setJobs] = useState([]);\n\n  useEffect(() => {\n    fetch('/api/getJobs')\n      .then(response => response.json())\n      .then(jsonResponse => setJobs(jsonResponse.data));\n  }, []);\n\n  const deleteJob = id => {\n    fetch(`/api/deleteJob/${id}`, {\n      method: 'DELETE'\n    })\n      .then(response => response.json())\n      .then(response => removeJobById(response.id));\n  }\n\n  const removeJobById = jobId => setJobs(jobs.filter(job => job._id !== jobId));\n\n  return (\n    <div className=\"jobList-container\">\n      <Suspense fallback={ <div>Loading...</div>}>\n        { jobs.length && jobs.map(job => {\n          return (\n            <JobItem \n              key={ job._id }\n              jobId={ job._id }\n              title={ job.title } \n              description={ job.description } \n              imgUrl={ job.imgUrl }\n              createdAt={ job.createdAt }\n              deleteJob={ deleteJob }\n            />\n            )\n          })\n        }\n      </Suspense>\n    </div>\n  )\n}\n\nexport default JobPostList;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// Components\nimport Header from './components/Header';\nimport NewJobPost from './components/NewJobPost';\nimport JobPostList from './components/JobPostList';\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <Header title=\"Jobs\" />\n        <Router>\n          <main>\n            <nav>\n              <ul>\n                <li>\n                  <Link to='/'>Home</Link>\n                </li>\n                <li>\n                  <Link to='/new-post'>New Job</Link>\n                </li>\n              </ul>\n            </nav>\n            <Switch>\n              <Route \n                exact \n                path=\"/new-post\" \n                component={ NewJobPost }\n                />\n              <Route \n                path=\"/\"\n                component={ JobPostList }\n              />\n            </Switch>\n          </main>\n        </Router>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}